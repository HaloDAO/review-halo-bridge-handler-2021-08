{{> partials/splash}}

[TOC]

## Details

- **Client** {{client_name}}
- **Date** {{date}}
- **Lead reviewer** Andrei Simion ([@andreiashu](https://twitter.com/andreiashu))
- **Reviewers** Daniel Luca ([@cleanunicorn](https://twitter.com/cleanunicorn)), Andrei Simion ([@andreiashu](https://twitter.com/andreiashu))
- **Repository**: [{{project_name}}]({{source_repository}})
- **Commit hash** `{{commit_hash}}`
- **Technologies**
  - TypeScript

## Issues Summary

| SEVERITY       |    OPEN    |    CLOSED    |
|----------------|:----------:|:------------:|
{{#issues_summary}}
|  {{severity}}  |  {{open}}  |  {{closed}}  |
{{/issues_summary}}

## Executive summary

This report represents the results of the engagement with **{{client_name}}** to review **{{project_name}}**.

The review is part of a broader engagement with HaloDAO that includes several other components from the HaloDAO ecosystem (Halo Rewards, Halo AMM, Halo Bridge, Halo Bridge Handler).

The full review (across above-mentioned repositories) was conducted over the course of **{{review_period}}** from **{{date_interval}}**. We spent a total of **{{person_days}} person-days** reviewing the code.


### Review progress and strategy

The HaloDAO Bridge sits between Ethereum mainnet and any other EVM compatible chain - Polygon being the first Layer 2 chain targeted for implementation.

We started by going through the Solidity smart contracts inside the HaloDAO Token Bridge repository and reading the TypeScript code within the HaloDAO Bridge Handler repository. To process transfers from Chain A to Chain B (e.g. Ethereum mainnet to Polygon), the Bridge Handler uses a service ([HAL](https://www.hal.xyz/)) that helps pass Events from a chain to a webhook endpoint. Specifically, when a `DepositReceived` Event is emitted from the `PrimaryBridge` smart contract, the HAL service will call the HaloDAO Bridge Handler endpoint. The Bridge Handler script calls the `mint` function on the `SecondaryBridge` smart contract to create the respective tokens on the destination chain.

Because of the nature of decentralized blockchains, it is critical that the code that interacts with any of the chains involved in the transfer process are aware of [_chain reorganization_ (or _reorg_)](https://learnmeabitcoin.com/technical/chain-reorganisation).

While discussing with the team, it became clear that the HAL service waits for three block confirmations before it considers a block as finalized. This is nowhere near the desired safety level for a cross-chain Bridge. For example, centralized exchanges use a minimum of 10 confirmations for any Ethereum / ERC20 transfer (we provide more details in [#1](#hal-service-might-cause-a-double-spend-in-the-bridge---can-lead-to-loss-of-funds)).

The next question we asked ourselves was what should be a safe amount of block confirmations to consider a block as finalized for each of the chains involved. The Polygon chain has much faster block times and therefore requires a higher number of confirmations. We detailed our findings in issue [#2](#minting-to-opposing-chain-can-lead-to-loss-of-funds).

We continued to review the code and communicate with the team while creating an overview of the architecture to help us better understand its trust model.

## Trust model

We identified a few essential parts of the system that hold increased trust and are critical to the system's correctness and well behavior.

### Reliance on an external party for the safety of transactions and funds

The HAL service has complete control over funds on all chains supported by the HaloDAO Bridge. For example, if HAL is compromised, an attacker __can drain funds__ out of the Ethereum mainnet `PrimaryBridge` contract. 

### Centralised control of smart contracts and transfer handling scripts

Currently, both the blockchain smart contracts and the HaloDAO Bridge Handler scripts are controlled by the HaloDAO team. If the (multi-sig) account that controls the smart contracts is compromised, user funds are at risk.

The Bridge Handler will have to run on a server (AWS infrastructure). Therefore, the cloud account(s) that have access to these scripts are also vulnerable to an attack.


## Scope

The initial review focused on the [{{project_name}}]({{source_repository}}) repository, identified by the commit hash `{{commit_hash}}`.

**Includes:**


- code/app/factories/ParentBridge.ts
- code/app/factories/SecondaryBridge.ts
- code/app/factories/PrimaryBridge.ts
- code/app/factories/ChainProvider.ts

## Issues

{{#issues}}

### [{{title}}]({{url}})
![Issue status: {{status}}](https://img.shields.io/static/v1?label=Status&message={{status}}&color={{status_color}}&style=flat-square) ![{{severity}}](https://img.shields.io/static/v1?label=Severity&message={{severity}}&color={{severity_color}}&style=flat-square)

{{{body}}}

---


{{/issues}}


## License

This report falls under the terms described in the included [LICENSE](./LICENSE).

{{> partials/features}}
<link rel="stylesheet" href="./style/print.css"/>
