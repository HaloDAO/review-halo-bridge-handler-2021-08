{{> partials/splash}}

[TOC]

## Details

- **Client** {{client_name}}
- **Date** {{date}}
- **Lead reviewer** Andrei Simion ([@andreiashu](https://twitter.com/andreiashu))
- **Reviewers** Daniel Luca ([@cleanunicorn](https://twitter.com/cleanunicorn)), Andrei Simion ([@andreiashu](https://twitter.com/andreiashu))
- **Repository**: [{{project_name}}]({{source_repository}})
- **Commit hash** `{{commit_hash}}`
- **Technologies**
  - TypeScript

## Issues Summary

| SEVERITY       |    OPEN    |    CLOSED    |
|----------------|:----------:|:------------:|
{{#issues_summary}}
|  {{severity}}  |  {{open}}  |  {{closed}}  |
{{/issues_summary}}

## Executive summary

This report represents the results of the engagement with **{{client_name}}** to review **{{project_name}}**.

The review is part of a wider one, which includes several other components from the HaloDAO ecosystem: (Halo Rewards, Halo AMM, Halo Bridge, Halo Bridge Handler). It was conducted over the course of **{{review_period}}** from **{{date_interval}}**. A total of **{{person_days}} person-days** were spent reviewing the code.

### Review progress and strategy

The HaloDAO Bridge sits between Ethereum mainnet and any other EVM compatible chain - Polygon being the first Layer 2 chain targeted for implementation.

We started by going through the Solidity smart contracts inside the HaloDAO Token Bridge repository as well as reading the TypeScript code within the HaloDAO Bridge Handler repository. In order to process transfers from Chain A to Chain B (eg. Ethereum mainnet to Polygon), the Bridge Handler uses a service ([HAL](https://www.hal.xyz/)) that helps pass Events from a chain to a webhook endpoint. Specifically, when a `DepositReceived` Event is emitted from the `PrimaryBridge` smart contract, the HAL service will call the HaloDAO Bridge Handler endpoint. From here the Bridge Handler script calls `mint` function on the `SecondaryBridge` smart contract in order to create the respective tokens on the destination chain.

Because of the nature of decentralized blockchains, it is critical that the code that interactions with any of the chains involved in the transfer process are aware of [_chain reorganisation_ (or _reorg_)](https://learnmeabitcoin.com/technical/chain-reorganisation).

While discussing with the team it became clear early on that the HAL service waits for 3 block confirmations before it considers a block as finalized. This is nowhere near the desired safety level for a cross-chain Bridge: for example, centralised exchanges use a minimum of 10 confirmations for any Ethereum / ERC20 transfer (we detailed this in issue #1).

The next question we asked ourselves was what should be a safe amount of block confirmations to consider a block as finalized for each of the chains involved. The Polygon chain has much faster block times and therefore requires a higher number of confirmations. We detailed our findings about this in issue #1.

We continued to review the code and communicate with the team, while creating an overview of the architecture to help us have a better understanding of its trust model.

## Trust model

We identified a few important parts of the system that hold increased trust and are critical to the system's correctness and well behavior.

### Reliance on an external party for safety of transactions and funds

The HAL service has full control over funds on all chains supported by the HaloDAO Bridge. For example, if HAL is compromised, an attacker __is able to drain funds__ out of the Ethereum mainnet `PrimaryBridge` contract. 

### Centralised control of smart contracts and transfer handling scripts

Currently both the blockchain smart contracts and the HaloDAO Bridge Handler scripts are controlled by the HaloDAO team. If the (multisig) account that controls the smart contracts is compromised, user funds are at risk.

The Bridge Handler will have to run on a server (AWS infrastructure), therefore the cloud account(s) that have access to these scripts are vulnerable to an attack as well.


## Scope

The initial review focused on the [{{project_name}}]({{source_repository}}) repository, identified by the commit hash `{{commit_hash}}`.

**Includes:**

- code/database/migrations/20210709195024_bridge_contracts.ts
- code/database/migrations/20210713001648_mint_requests.ts
- code/database/migrations/20210721125855_burns.ts
- code/database/migrations/20210721130355_redeem_requests.ts
- code/database/migrations/20210729010706_webhook_triggers.ts
- code/database/migrations/20210706173702_deposits.ts
- code/database/knex.ts
- code/database/seeds/bridge_contracts.ts
- code/database/seeds/webhook_triggers.ts
- code/app/middlewares/ListMetadata.ts
- code/app/utils/FeeCalculator.ts
- code/app/utils/logger.ts
- code/app/utils/message.ts
- code/app/utils/RepositoryQueryUtil.ts
- code/app/repositories/WebhookTriggerRepository.ts
- code/app/repositories/MintRequestRepository.ts
- code/app/repositories/DepositRepository.ts
- code/app/repositories/BaseRepository.ts
- code/app/repositories/RedeemRequestRepository.ts
- code/app/repositories/BurnRepository.ts
- code/app/repositories/BridgeContractRepository.ts
- code/app/external-services/SQSService.ts
- code/app/external-services/SecretsManagerService.ts
- code/app/container.ts
- code/app/factories/ParentBridge.ts
- code/app/factories/SecondaryBridge.ts
- code/app/factories/PrimaryBridge.ts
- code/app/factories/ChainProvider.ts
- code/app/factories/TokenContract.ts
- code/app/model/dto/MintRequest.ts
- code/app/model/dto/BridgeContract.ts
- code/app/model/dto/WebhookTrigger.ts
- code/app/model/dto/Burn.ts
- code/app/model/dto/Transaction.ts
- code/app/model/dto/Deposit.ts
- code/app/model/dto/RedeemRequest.ts
- code/app/model/vo/responseVo.ts
- code/app/model/vo/apiQueryVo.ts
- code/app/handler.ts
- code/app/env.ts
- code/app/handlers/SecondaryBridgeHandler.ts
- code/app/handlers/DepositHandler.ts
- code/app/handlers/MintRequestHandler.ts
- code/app/handlers/BurnHandler.ts
- code/app/handlers/RedeemRequestHandler.ts
- code/app/handlers/PrimaryBridgeHandler.ts
- code/app/services/SecondaryBridgeService.ts
- code/app/services/BurnService.ts
- code/app/services/RedeemRequestService.ts
- code/app/services/MintRequestService.ts
- code/app/services/DepositService.ts
- code/app/services/PrimaryBridgeService.ts
- code/tsconfig.json


## Issues

{{#issues}}

### [{{title}}]({{url}})
![Issue status: {{status}}](https://img.shields.io/static/v1?label=Status&message={{status}}&color={{status_color}}&style=flat-square) ![{{severity}}](https://img.shields.io/static/v1?label=Severity&message={{severity}}&color={{severity_color}}&style=flat-square)

{{{body}}}

---


{{/issues}}


## License

This report falls under the terms described in the included [LICENSE](./LICENSE).

{{> partials/features}}
<link rel="stylesheet" href="./style/print.css"/>
